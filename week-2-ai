{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "410b6c4d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-08T11:30:09.961271Z",
     "iopub.status.busy": "2025-06-08T11:30:09.960928Z",
     "iopub.status.idle": "2025-06-08T11:30:14.341871Z",
     "shell.execute_reply": "2025-06-08T11:30:14.340979Z"
    },
    "papermill": {
     "duration": 4.387329,
     "end_time": "2025-06-08T11:30:14.343577",
     "exception": false,
     "start_time": "2025-06-08T11:30:09.956248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Load dataset\n",
    "df = pd.read_csv('/kaggle/input/skin-cancer-mnist-ham10000/hmnist_28_28_L.csv')\n",
    "meta = pd.read_csv('/kaggle/input/skin-cancer-mnist-ham10000/HAM10000_metadata.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b419e28a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-08T11:30:14.351354Z",
     "iopub.status.busy": "2025-06-08T11:30:14.351019Z",
     "iopub.status.idle": "2025-06-08T11:30:14.356221Z",
     "shell.execute_reply": "2025-06-08T11:30:14.355222Z"
    },
    "papermill": {
     "duration": 0.010482,
     "end_time": "2025-06-08T11:30:14.357666",
     "exception": false,
     "start_time": "2025-06-08T11:30:14.347184",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=======================================================\n",
      "Inspecting the Data\n",
      "=======================================================\n"
     ]
    }
   ],
   "source": [
    "print('='*55)\n",
    "print('Inspecting the Data')\n",
    "print('='*55)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d36bc180",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-08T11:30:14.364756Z",
     "iopub.status.busy": "2025-06-08T11:30:14.364449Z",
     "iopub.status.idle": "2025-06-08T11:30:14.399616Z",
     "shell.execute_reply": "2025-06-08T11:30:14.398752Z"
    },
    "papermill": {
     "duration": 0.040184,
     "end_time": "2025-06-08T11:30:14.401000",
     "exception": false,
     "start_time": "2025-06-08T11:30:14.360816",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data Shape of File: (10015, 785) Data shape of the Meta: (10015, 7)\n",
      "Our First 5 Rows\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pixel0000</th>\n",
       "      <th>pixel0001</th>\n",
       "      <th>pixel0002</th>\n",
       "      <th>pixel0003</th>\n",
       "      <th>pixel0004</th>\n",
       "      <th>pixel0005</th>\n",
       "      <th>pixel0006</th>\n",
       "      <th>pixel0007</th>\n",
       "      <th>pixel0008</th>\n",
       "      <th>pixel0009</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel0775</th>\n",
       "      <th>pixel0776</th>\n",
       "      <th>pixel0777</th>\n",
       "      <th>pixel0778</th>\n",
       "      <th>pixel0779</th>\n",
       "      <th>pixel0780</th>\n",
       "      <th>pixel0781</th>\n",
       "      <th>pixel0782</th>\n",
       "      <th>pixel0783</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>169</td>\n",
       "      <td>171</td>\n",
       "      <td>170</td>\n",
       "      <td>177</td>\n",
       "      <td>181</td>\n",
       "      <td>182</td>\n",
       "      <td>181</td>\n",
       "      <td>185</td>\n",
       "      <td>194</td>\n",
       "      <td>192</td>\n",
       "      <td>...</td>\n",
       "      <td>184</td>\n",
       "      <td>186</td>\n",
       "      <td>185</td>\n",
       "      <td>180</td>\n",
       "      <td>157</td>\n",
       "      <td>140</td>\n",
       "      <td>140</td>\n",
       "      <td>159</td>\n",
       "      <td>165</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19</td>\n",
       "      <td>57</td>\n",
       "      <td>105</td>\n",
       "      <td>140</td>\n",
       "      <td>149</td>\n",
       "      <td>148</td>\n",
       "      <td>144</td>\n",
       "      <td>155</td>\n",
       "      <td>170</td>\n",
       "      <td>170</td>\n",
       "      <td>...</td>\n",
       "      <td>172</td>\n",
       "      <td>175</td>\n",
       "      <td>160</td>\n",
       "      <td>144</td>\n",
       "      <td>114</td>\n",
       "      <td>89</td>\n",
       "      <td>47</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>155</td>\n",
       "      <td>163</td>\n",
       "      <td>161</td>\n",
       "      <td>167</td>\n",
       "      <td>167</td>\n",
       "      <td>172</td>\n",
       "      <td>155</td>\n",
       "      <td>152</td>\n",
       "      <td>165</td>\n",
       "      <td>175</td>\n",
       "      <td>...</td>\n",
       "      <td>163</td>\n",
       "      <td>178</td>\n",
       "      <td>157</td>\n",
       "      <td>166</td>\n",
       "      <td>167</td>\n",
       "      <td>148</td>\n",
       "      <td>141</td>\n",
       "      <td>136</td>\n",
       "      <td>115</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25</td>\n",
       "      <td>71</td>\n",
       "      <td>116</td>\n",
       "      <td>139</td>\n",
       "      <td>136</td>\n",
       "      <td>153</td>\n",
       "      <td>148</td>\n",
       "      <td>161</td>\n",
       "      <td>172</td>\n",
       "      <td>162</td>\n",
       "      <td>...</td>\n",
       "      <td>125</td>\n",
       "      <td>135</td>\n",
       "      <td>138</td>\n",
       "      <td>137</td>\n",
       "      <td>111</td>\n",
       "      <td>71</td>\n",
       "      <td>32</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>129</td>\n",
       "      <td>162</td>\n",
       "      <td>181</td>\n",
       "      <td>196</td>\n",
       "      <td>205</td>\n",
       "      <td>208</td>\n",
       "      <td>205</td>\n",
       "      <td>213</td>\n",
       "      <td>225</td>\n",
       "      <td>224</td>\n",
       "      <td>...</td>\n",
       "      <td>210</td>\n",
       "      <td>197</td>\n",
       "      <td>172</td>\n",
       "      <td>190</td>\n",
       "      <td>195</td>\n",
       "      <td>193</td>\n",
       "      <td>181</td>\n",
       "      <td>147</td>\n",
       "      <td>88</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   pixel0000  pixel0001  pixel0002  pixel0003  pixel0004  pixel0005  \\\n",
       "0        169        171        170        177        181        182   \n",
       "1         19         57        105        140        149        148   \n",
       "2        155        163        161        167        167        172   \n",
       "3         25         71        116        139        136        153   \n",
       "4        129        162        181        196        205        208   \n",
       "\n",
       "   pixel0006  pixel0007  pixel0008  pixel0009  ...  pixel0775  pixel0776  \\\n",
       "0        181        185        194        192  ...        184        186   \n",
       "1        144        155        170        170  ...        172        175   \n",
       "2        155        152        165        175  ...        163        178   \n",
       "3        148        161        172        162  ...        125        135   \n",
       "4        205        213        225        224  ...        210        197   \n",
       "\n",
       "   pixel0777  pixel0778  pixel0779  pixel0780  pixel0781  pixel0782  \\\n",
       "0        185        180        157        140        140        159   \n",
       "1        160        144        114         89         47         18   \n",
       "2        157        166        167        148        141        136   \n",
       "3        138        137        111         71         32         16   \n",
       "4        172        190        195        193        181        147   \n",
       "\n",
       "   pixel0783  label  \n",
       "0        165      2  \n",
       "1         18      2  \n",
       "2        115      2  \n",
       "3         16      2  \n",
       "4         88      2  \n",
       "\n",
       "[5 rows x 785 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lesion_id</th>\n",
       "      <th>image_id</th>\n",
       "      <th>dx</th>\n",
       "      <th>dx_type</th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>localization</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>HAM_0000118</td>\n",
       "      <td>ISIC_0027419</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>80.0</td>\n",
       "      <td>male</td>\n",
       "      <td>scalp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>HAM_0000118</td>\n",
       "      <td>ISIC_0025030</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>80.0</td>\n",
       "      <td>male</td>\n",
       "      <td>scalp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>HAM_0002730</td>\n",
       "      <td>ISIC_0026769</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>80.0</td>\n",
       "      <td>male</td>\n",
       "      <td>scalp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>HAM_0002730</td>\n",
       "      <td>ISIC_0025661</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>80.0</td>\n",
       "      <td>male</td>\n",
       "      <td>scalp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>HAM_0001466</td>\n",
       "      <td>ISIC_0031633</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>75.0</td>\n",
       "      <td>male</td>\n",
       "      <td>ear</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     lesion_id      image_id   dx dx_type   age   sex localization\n",
       "0  HAM_0000118  ISIC_0027419  bkl   histo  80.0  male        scalp\n",
       "1  HAM_0000118  ISIC_0025030  bkl   histo  80.0  male        scalp\n",
       "2  HAM_0002730  ISIC_0026769  bkl   histo  80.0  male        scalp\n",
       "3  HAM_0002730  ISIC_0025661  bkl   histo  80.0  male        scalp\n",
       "4  HAM_0001466  ISIC_0031633  bkl   histo  75.0  male          ear"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(f\"Data Shape of File: {df.shape}\",f\"Data shape of the Meta: {meta.shape}\")\n",
    "print(f\"Our First 5 Rows\")\n",
    "display(df.head())\n",
    "display(meta.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dde62b70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-08T11:30:14.410007Z",
     "iopub.status.busy": "2025-06-08T11:30:14.409194Z",
     "iopub.status.idle": "2025-06-08T11:30:14.457724Z",
     "shell.execute_reply": "2025-06-08T11:30:14.456998Z"
    },
    "papermill": {
     "duration": 0.054146,
     "end_time": "2025-06-08T11:30:14.459010",
     "exception": false,
     "start_time": "2025-06-08T11:30:14.404864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=======================================================\n",
      "Df Info\n",
      "=======================================================\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10015 entries, 0 to 10014\n",
      "Columns: 785 entries, pixel0000 to label\n",
      "dtypes: int64(785)\n",
      "memory usage: 60.0 MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=======================================================\n",
      "Meta Info\n",
      "=======================================================\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10015 entries, 0 to 10014\n",
      "Data columns (total 7 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   lesion_id     10015 non-null  object \n",
      " 1   image_id      10015 non-null  object \n",
      " 2   dx            10015 non-null  object \n",
      " 3   dx_type       10015 non-null  object \n",
      " 4   age           9958 non-null   float64\n",
      " 5   sex           10015 non-null  object \n",
      " 6   localization  10015 non-null  object \n",
      "dtypes: float64(1), object(6)\n",
      "memory usage: 547.8+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print('='*55)\n",
    "print('Df Info')\n",
    "print('='*55)\n",
    "display(df.info())\n",
    "print('='*55)\n",
    "print('Meta Info')\n",
    "print('='*55)\n",
    "display(meta.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f2aa1cc6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-08T11:30:14.467945Z",
     "iopub.status.busy": "2025-06-08T11:30:14.467628Z",
     "iopub.status.idle": "2025-06-08T11:30:14.519587Z",
     "shell.execute_reply": "2025-06-08T11:30:14.518839Z"
    },
    "papermill": {
     "duration": 0.058309,
     "end_time": "2025-06-08T11:30:14.521173",
     "exception": false,
     "start_time": "2025-06-08T11:30:14.462864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Separate labels from pixel values\n",
    "labels = df['label']\n",
    "pixels = df.drop('label', axis=1)\n",
    "\n",
    "# Scale pixel values to range 0â€“1\n",
    "pixels_scaled = pixels / 255.0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "26fbcf7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-08T11:30:14.530440Z",
     "iopub.status.busy": "2025-06-08T11:30:14.529694Z",
     "iopub.status.idle": "2025-06-08T11:30:14.563939Z",
     "shell.execute_reply": "2025-06-08T11:30:14.563262Z"
    },
    "papermill": {
     "duration": 0.040419,
     "end_time": "2025-06-08T11:30:14.565545",
     "exception": false,
     "start_time": "2025-06-08T11:30:14.525126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_scaled = pixels_scaled.copy()\n",
    "df_scaled['label'] = labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1738cce3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-08T11:30:14.574511Z",
     "iopub.status.busy": "2025-06-08T11:30:14.573852Z",
     "iopub.status.idle": "2025-06-08T11:30:14.682961Z",
     "shell.execute_reply": "2025-06-08T11:30:14.681833Z"
    },
    "papermill": {
     "duration": 0.115077,
     "end_time": "2025-06-08T11:30:14.684463",
     "exception": false,
     "start_time": "2025-06-08T11:30:14.569386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        count      mean       std       min       25%       50%       75%  \\\n",
      "label                                                                       \n",
      "0       327.0  0.643255  0.059216  0.469823  0.602881  0.642957  0.681428   \n",
      "1       514.0  0.658279  0.065175  0.422629  0.623099  0.660984  0.701566   \n",
      "2      1099.0  0.593914  0.069162  0.370168  0.544653  0.592132  0.643527   \n",
      "3       115.0  0.649866  0.062497  0.471068  0.603349  0.648920  0.690751   \n",
      "4      6705.0  0.612366  0.075389  0.316427  0.562780  0.611715  0.662050   \n",
      "5       142.0  0.645948  0.075440  0.447589  0.584928  0.649615  0.696471   \n",
      "6      1113.0  0.589032  0.075439  0.225955  0.539141  0.586310  0.638295   \n",
      "\n",
      "            max  \n",
      "label            \n",
      "0      0.789301  \n",
      "1      0.816086  \n",
      "2      0.826175  \n",
      "3      0.809809  \n",
      "4      0.899650  \n",
      "5      0.888635  \n",
      "6      0.868722  \n"
     ]
    }
   ],
   "source": [
    "# Mean pixel value per image\n",
    "df_scaled['mean_pixel'] = df_scaled.drop('label', axis=1).mean(axis=1)\n",
    "\n",
    "# Group by label and look at average pixel intensity\n",
    "summary_by_label = df_scaled.groupby('label')['mean_pixel'].describe()\n",
    "print(summary_by_label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3ecc2f24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-08T11:30:14.693534Z",
     "iopub.status.busy": "2025-06-08T11:30:14.693188Z",
     "iopub.status.idle": "2025-06-08T11:30:15.133796Z",
     "shell.execute_reply": "2025-06-08T11:30:15.132860Z"
    },
    "papermill": {
     "duration": 0.448053,
     "end_time": "2025-06-08T11:30:15.136588",
     "exception": false,
     "start_time": "2025-06-08T11:30:14.688535",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_13/3393205398.py:17: UserWarning: Glyph 128444 (\\N{FRAME WITH PICTURE}) missing from current font.\n",
      "  plt.tight_layout()\n",
      "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 128444 (\\N{FRAME WITH PICTURE}) missing from current font.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Pick a row to analyze\n",
    "i = 300  # Feel free to change to other rows\n",
    "pixels = df.drop('label', axis=1).iloc[i].values\n",
    "label = df.iloc[i]['label']\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(14, 4))\n",
    "plt.plot(pixels, color='darkblue', linewidth=1.2)\n",
    "plt.axhspan(0, 50, color='red', alpha=0.1, label='Very Dark Pixels (0â€“50)')\n",
    "plt.axhspan(200, 255, color='yellow', alpha=0.1, label='Very Bright Pixels (200â€“255)')\n",
    "\n",
    "plt.title(f\"ðŸ–¼ Pixel Intensity Profile of Image {i} â€” Diagnosis Label: {label}\", fontsize=14)\n",
    "plt.xlabel('Pixel Position (0â€“783)')\n",
    "plt.ylabel('Pixel Intensity (0â€“255)')\n",
    "plt.legend(loc='upper right')\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ed31931e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-08T11:30:15.150106Z",
     "iopub.status.busy": "2025-06-08T11:30:15.149776Z",
     "iopub.status.idle": "2025-06-08T11:30:15.598099Z",
     "shell.execute_reply": "2025-06-08T11:30:15.597345Z"
    },
    "papermill": {
     "duration": 0.456679,
     "end_time": "2025-06-08T11:30:15.599749",
     "exception": false,
     "start_time": "2025-06-08T11:30:15.143070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "eab535a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-08T11:30:15.612170Z",
     "iopub.status.busy": "2025-06-08T11:30:15.611867Z",
     "iopub.status.idle": "2025-06-08T11:30:15.660281Z",
     "shell.execute_reply": "2025-06-08T11:30:15.659464Z"
    },
    "papermill": {
     "duration": 0.056208,
     "end_time": "2025-06-08T11:30:15.661844",
     "exception": false,
     "start_time": "2025-06-08T11:30:15.605636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Separate features and labels\n",
    "X = df.drop('label', axis=1)\n",
    "y = df['label']\n",
    "\n",
    "# Normalize pixel values\n",
    "X_normalized = X / 255.0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "27f9d65f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-08T11:30:15.673991Z",
     "iopub.status.busy": "2025-06-08T11:30:15.673680Z",
     "iopub.status.idle": "2025-06-08T11:30:15.720628Z",
     "shell.execute_reply": "2025-06-08T11:30:15.719933Z"
    },
    "papermill": {
     "duration": 0.054931,
     "end_time": "2025-06-08T11:30:15.722412",
     "exception": false,
     "start_time": "2025-06-08T11:30:15.667481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Use normalized X and label y\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_normalized, y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ac7dd235",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-08T11:30:15.734597Z",
     "iopub.status.busy": "2025-06-08T11:30:15.734324Z",
     "iopub.status.idle": "2025-06-08T11:30:36.087029Z",
     "shell.execute_reply": "2025-06-08T11:30:36.086028Z"
    },
    "papermill": {
     "duration": 20.36055,
     "end_time": "2025-06-08T11:30:36.088651",
     "exception": false,
     "start_time": "2025-06-08T11:30:15.728101",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(random_state=42)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "model.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "305c3cd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-08T11:30:36.103307Z",
     "iopub.status.busy": "2025-06-08T11:30:36.102445Z",
     "iopub.status.idle": "2025-06-08T11:30:36.215603Z",
     "shell.execute_reply": "2025-06-08T11:30:36.214295Z"
    },
    "papermill": {
     "duration": 0.122548,
     "end_time": "2025-06-08T11:30:36.217459",
     "exception": false,
     "start_time": "2025-06-08T11:30:36.094911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c7102dd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-08T11:30:36.230885Z",
     "iopub.status.busy": "2025-06-08T11:30:36.230513Z",
     "iopub.status.idle": "2025-06-08T11:30:36.256690Z",
     "shell.execute_reply": "2025-06-08T11:30:36.255014Z"
    },
    "papermill": {
     "duration": 0.034816,
     "end_time": "2025-06-08T11:30:36.258311",
     "exception": false,
     "start_time": "2025-06-08T11:30:36.223495",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6844732900649027\n",
      "Confusion Matrix:\n",
      " [[   3    9   11    0   43    0    3]\n",
      " [   1   12    4    0   75    0    1]\n",
      " [   0    5   38    0  172    0   13]\n",
      " [   0    6    4    0   17    0    1]\n",
      " [   1    1   21    0 1294    0   21]\n",
      " [   0    0    0    0   21    0    0]\n",
      " [   5    2   20    0  175    0   24]]\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.30      0.04      0.08        69\n",
      "           1       0.34      0.13      0.19        93\n",
      "           2       0.39      0.17      0.23       228\n",
      "           3       0.00      0.00      0.00        28\n",
      "           4       0.72      0.97      0.83      1338\n",
      "           5       0.00      0.00      0.00        21\n",
      "           6       0.38      0.11      0.17       226\n",
      "\n",
      "    accuracy                           0.68      2003\n",
      "   macro avg       0.30      0.20      0.21      2003\n",
      "weighted avg       0.59      0.68      0.61      2003\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "\n",
    "# Accuracy\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
    "\n",
    "# Confusion Matrix\n",
    "print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n",
    "\n",
    "# Classification Report\n",
    "print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 54339,
     "sourceId": 104884,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 31.816447,
   "end_time": "2025-06-08T11:30:37.086069",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-08T11:30:05.269622",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
